# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: debug

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Check
        run: |
          library(mlflow)
          install_mlflow()
          mlflow:::python_mlflow_bin()
          mlflow:::python_bin()
          dir(dirname(mlflow:::python_bin())) # is mlflow here?
          dir(file.path(dirname(mlflow:::python_bin()), "Scripts")) # or here?
        shell: Rscript {0}
      - name: In Python
        run: |
          C:\\Miniconda\\envs\\r-mlflow-1.12.0\\python.exe -c 'import mlflow; print(mlflow.get_tracking_uri())'
# conda run -n r-mlflow-1.10.0 python -c 'import mlflow; print(mlflow.get_tracking_uri())'
      - name: Fresh session
        run: |
          if (identical(.Platform$OS.type, "windows")) {
            Sys.setenv(MLFLOW_BIN = "C:\\Miniconda\\envs\\r-mlflow-1.12.0\\Scripts\\mlflow.exe")
          }
          library(mlflow)
          # mlflow_start_run()
          # mlflow:::mlflow_client()

          tracking_uri_raw <- mlflow:::mlflow_get_tracking_uri()
          tracking_uri_raw
          tracking_uri <- mlflow:::new_mlflow_uri(tracking_uri_raw)
          tracking_uri
          client <- mlflow:::new_mlflow_client.mlflow_file(tracking_uri)
          client
          if (inherits(client, "mlflow_file_client")) {
            cat("inherits is true\n")
            mlflow:::mlflow_validate_server(client)
          }

          mlflow::mlflow_log_param("param1", 5)
        shell: Rscript {0}
